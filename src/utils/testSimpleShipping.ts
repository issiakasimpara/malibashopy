import { supabase } from '@/integrations/supabase/client';
import { createSimpleShippingMethods, getShippingMethodsForCountry } from './simpleShipping';

/**
 * TESTER LE SYST√àME SIMPLE IMM√âDIATEMENT
 */
export const testShippingNow = async () => {
  console.log('üß™ TEST IMM√âDIAT DU SYST√àME DE LIVRAISON');

  try {
    // 1. Trouver une boutique existante
    console.log('üîç Recherche d\'une boutique...');
    const { data: stores, error: storesError } = await supabase
      .from('stores')
      .select('id, name')
      .limit(1);

    if (storesError || !stores || stores.length === 0) {
      console.error('‚ùå Aucune boutique trouv√©e:', storesError);
      return { success: false, message: 'Aucune boutique trouv√©e' };
    }

    const testStore = stores[0];
    console.log('üè™ Boutique de test:', testStore.name, `(${testStore.id})`);

    // 2. Cr√©er les m√©thodes de livraison
    console.log('üöÄ Cr√©ation des m√©thodes...');
    const createResult = await createSimpleShippingMethods(testStore.id);
    
    if (!createResult.success) {
      console.error('‚ùå √âchec cr√©ation:', createResult.error);
      return createResult;
    }

    console.log('‚úÖ M√©thodes cr√©√©es:', createResult.methods);

    // 3. Tester pour le Mali
    console.log('üá≤üá± Test pour le Mali...');
    const maliResult = await getShippingMethodsForCountry(testStore.id, 'ML');
    
    if (!maliResult.success) {
      console.error('‚ùå √âchec test Mali:', maliResult.error);
      return maliResult;
    }

    console.log('‚úÖ M√©thodes Mali:', maliResult.methods.length);

    // 4. Tester pour le S√©n√©gal
    console.log('üá∏üá≥ Test pour le S√©n√©gal...');
    const senegalResult = await getShippingMethodsForCountry(testStore.id, 'SN');
    
    if (!senegalResult.success) {
      console.error('‚ùå √âchec test S√©n√©gal:', senegalResult.error);
      return senegalResult;
    }

    console.log('‚úÖ M√©thodes S√©n√©gal:', senegalResult.methods.length);

    // 5. R√©sultat final
    console.log('üéâ TEST R√âUSSI !');
    return {
      success: true,
      storeId: testStore.id,
      storeName: testStore.name,
      methodsCreated: createResult.methods,
      maliMethods: maliResult.methods.length,
      senegalMethods: senegalResult.methods.length,
      details: {
        mali: maliResult.methods,
        senegal: senegalResult.methods
      }
    };

  } catch (error) {
    console.error('üí• ERREUR TEST:', error);
    return {
      success: false,
      error: error
    };
  }
};

/**
 * V√©rifier la structure de la table shipping_methods
 */
export const checkTableStructure = async () => {
  console.log('üîç V√©rification structure table shipping_methods...');

  try {
    // Essayer d'ins√©rer une m√©thode de test
    const testMethod = {
      store_id: '00000000-0000-0000-0000-000000000000', // UUID fictif
      name: 'Test Method',
      description: 'Test',
      price: 1000,
      estimated_days: '1-2 jours',
      is_active: true,
      available_countries: ['ML']
    };

    const { error } = await supabase
      .from('shipping_methods')
      .insert(testMethod)
      .select();

    if (error) {
      console.log('üìã Structure d√©tect√©e via erreur:', error.message);
      
      // Analyser l'erreur pour comprendre la structure
      if (error.message.includes('available_countries')) {
        console.log('‚úÖ Colonne available_countries: EXISTE');
      } else {
        console.log('‚ùå Colonne available_countries: MANQUANTE');
      }

      if (error.message.includes('shipping_zone_id')) {
        console.log('‚úÖ Colonne shipping_zone_id: EXISTE');
      }

      return {
        success: false,
        error: error.message,
        hasAvailableCountries: error.message.includes('available_countries'),
        hasShippingZoneId: error.message.includes('shipping_zone_id')
      };
    }

    // Si pas d'erreur, supprimer la m√©thode de test
    await supabase
      .from('shipping_methods')
      .delete()
      .eq('store_id', '00000000-0000-0000-0000-000000000000');

    console.log('‚úÖ Structure table OK !');
    return {
      success: true,
      message: 'Table structure compatible'
    };

  } catch (error) {
    console.error('üí• Erreur v√©rification:', error);
    return {
      success: false,
      error: error
    };
  }
};

// Exposer globalement
if (typeof window !== 'undefined') {
  (window as any).testShippingNow = testShippingNow;
  (window as any).checkTableStructure = checkTableStructure;
}
