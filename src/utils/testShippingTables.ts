import { supabase } from '@/integrations/supabase/client';

/**
 * Fonction pour tester si les tables de livraisons existent et fonctionnent
 */
export const testShippingTables = async () => {
  console.log('üß™ Test des tables de livraisons...');

  try {
    // Test 1: V√©rifier l'existence des tables en tentant une requ√™te SELECT
    console.log('üìã Test de la table shipping_zones...');
    const { data: zonesData, error: zonesError } = await supabase
      .from('shipping_zones' as any)
      .select('id')
      .limit(1);

    console.log('üìã Test de la table shipping_methods...');
    const { data: methodsData, error: methodsError } = await supabase
      .from('shipping_methods' as any)
      .select('id')
      .limit(1);

    if (zonesError || methodsError) {
      console.error('‚ùå Erreurs d√©tect√©es:', { zonesError, methodsError });
      return {
        success: false,
        message: 'Les tables n\'existent pas ou ne sont pas accessibles.',
        errors: { zonesError, methodsError }
      };
    }

    console.log('‚úÖ Tables d√©tect√©es et accessibles !');
    return {
      success: true,
      message: 'Les tables existent et sont fonctionnelles !',
      data: { zonesCount: zonesData?.length || 0, methodsCount: methodsData?.length || 0 }
    };

  } catch (error) {
    console.error('‚ùå Erreur lors du test des tables:', error);
    return {
      success: false,
      message: 'Erreur lors du test des tables.',
      error
    };
  }
};

/**
 * Fonction pour cr√©er des donn√©es de test pour les livraisons
 */
export const createSampleShippingData = async (storeId: string) => {
  console.log('üì¶ Cr√©ation des donn√©es de test pour la boutique:', storeId);

  try {
    // Cr√©er une zone de livraison de test
    console.log('üåç Cr√©ation d\'une zone de livraison...');
    const { data: zone, error: zoneError } = await supabase
      .from('shipping_zones' as any)
      .insert({
        store_id: storeId,
        name: 'Afrique Francophone',
        description: 'Zone de livraison pour les pays francophones d\'Afrique',
        countries: [
          'S√©n√©gal', 'Mali', 'Burkina Faso', 'C√¥te d\'Ivoire', 
          'Niger', 'Guin√©e', 'B√©nin', 'Togo', 'Cameroun', 'Tchad'
        ],
        is_active: true
      })
      .select()
      .single();

    if (zoneError) {
      console.error('‚ùå Erreur cr√©ation zone:', zoneError);
      throw zoneError;
    }

    console.log('‚úÖ Zone cr√©√©e:', zone.id);

    // Cr√©er des m√©thodes de livraison de test
    console.log('üöö Cr√©ation des m√©thodes de livraison...');
    const shippingMethods = [
      {
        store_id: storeId,
        shipping_zone_id: zone.id,
        name: 'Livraison Standard',
        description: 'Livraison standard dans votre pays',
        icon: 'üì¶',
        price: 2500,
        free_shipping_threshold: 50000,
        estimated_days: '3-5 jours ouvrables',
        is_active: true,
        sort_order: 1
      },
      {
        store_id: storeId,
        shipping_zone_id: zone.id,
        name: 'Livraison Express',
        description: 'Livraison rapide en 24-48h',
        icon: '‚ö°',
        price: 5000,
        free_shipping_threshold: null,
        estimated_days: '1-2 jours ouvrables',
        is_active: true,
        sort_order: 2
      },
      {
        store_id: storeId,
        shipping_zone_id: null, // M√©thode globale
        name: 'Retrait en magasin',
        description: 'R√©cup√©rez votre commande directement en magasin',
        icon: 'üè™',
        price: 0,
        free_shipping_threshold: null,
        estimated_days: 'Imm√©diat',
        is_active: true,
        sort_order: 3
      }
    ];

    const { data: methods, error: methodsError } = await supabase
      .from('shipping_methods' as any)
      .insert(shippingMethods)
      .select();

    if (methodsError) {
      console.error('‚ùå Erreur cr√©ation m√©thodes:', methodsError);
      throw methodsError;
    }

    console.log('‚úÖ M√©thodes cr√©√©es:', methods.length);

    return {
      success: true,
      message: `Donn√©es de test cr√©√©es avec succ√®s ! Zone: ${zone.name}, M√©thodes: ${methods.length}`,
      data: { zone, methods }
    };

  } catch (error) {
    console.error('‚ùå Erreur lors de la cr√©ation des donn√©es de test:', error);
    return {
      success: false,
      message: 'Erreur lors de la cr√©ation des donn√©es de test.',
      error
    };
  }
};

/**
 * Fonction pour nettoyer les donn√©es de test
 */
export const cleanupTestData = async (storeId: string) => {
  console.log('üßπ Nettoyage des donn√©es de test pour la boutique:', storeId);

  try {
    // Supprimer les m√©thodes de livraison
    const { error: methodsError } = await supabase
      .from('shipping_methods' as any)
      .delete()
      .eq('store_id', storeId);

    if (methodsError) throw methodsError;

    // Supprimer les zones de livraison
    const { error: zonesError } = await supabase
      .from('shipping_zones' as any)
      .delete()
      .eq('store_id', storeId);

    if (zonesError) throw zonesError;

    console.log('‚úÖ Donn√©es de test supprim√©es');
    return {
      success: true,
      message: 'Donn√©es de test supprim√©es avec succ√®s !'
    };

  } catch (error) {
    console.error('‚ùå Erreur lors du nettoyage:', error);
    return {
      success: false,
      message: 'Erreur lors du nettoyage des donn√©es de test.',
      error
    };
  }
};
