import { supabase } from '@/integrations/supabase/client';

// Fonction pour cr√©er les tables manuellement via des requ√™tes SQL simples
export async function createTablesManually() {
  try {
    console.log('üîß Cr√©ation manuelle des tables...');

    // V√©rifier d'abord si les tables existent
    const { data: existingTables, error: checkError } = await supabase
      .from('information_schema.tables')
      .select('table_name')
      .eq('table_schema', 'public')
      .in('table_name', ['market_settings', 'shipping_methods']);

    if (checkError) {
      console.log('‚ùå Impossible de v√©rifier les tables existantes');
    }

    // Essayer de cr√©er les tables via des requ√™tes directes
    console.log('üìã Tentative de cr√©ation des tables...');

    // Cr√©er market_settings
    try {
      await supabase.rpc('exec_sql', {
        sql: `
          CREATE TABLE IF NOT EXISTS public.market_settings (
            id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
            store_id UUID NOT NULL,
            enabled_countries TEXT[] NOT NULL DEFAULT '{}',
            default_currency TEXT NOT NULL DEFAULT 'XOF',
            tax_settings JSONB DEFAULT '{"includeTax": false, "taxRate": 0, "taxLabel": "TVA"}'::jsonb,
            created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
            updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
            UNIQUE(store_id)
          );
        `
      });
      console.log('‚úÖ Table market_settings cr√©√©e');
    } catch (error) {
      console.log('‚ö†Ô∏è Erreur cr√©ation market_settings:', error);
    }

    // Cr√©er shipping_methods
    try {
      await supabase.rpc('exec_sql', {
        sql: `
          CREATE TABLE IF NOT EXISTS public.shipping_methods (
            id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
            store_id UUID NOT NULL,
            name TEXT NOT NULL,
            description TEXT,
            price DECIMAL(10,2) NOT NULL DEFAULT 0,
            estimated_days TEXT NOT NULL,
            icon TEXT NOT NULL DEFAULT 'üì¶',
            is_active BOOLEAN NOT NULL DEFAULT true,
            available_countries TEXT[] DEFAULT '{}',
            conditions JSONB DEFAULT NULL,
            created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
            updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
          );
        `
      });
      console.log('‚úÖ Table shipping_methods cr√©√©e');
    } catch (error) {
      console.log('‚ö†Ô∏è Erreur cr√©ation shipping_methods:', error);
    }

    return true;
  } catch (error) {
    console.error('‚ùå Erreur cr√©ation manuelle:', error);
    return false;
  }
}

// Fonction alternative : cr√©er les donn√©es directement sans tables
export async function createTestData() {
  try {
    console.log('üß™ Cr√©ation de donn√©es de test...');

    // R√©cup√©rer la premi√®re boutique disponible
    const { data: stores, error: storeError } = await supabase
      .from('stores')
      .select('id')
      .limit(1);

    if (storeError || !stores || stores.length === 0) {
      console.log('‚ùå Aucune boutique trouv√©e');
      return false;
    }

    const storeId = stores[0].id;
    console.log('üè™ Boutique trouv√©e:', storeId);

    // Essayer d'ins√©rer des donn√©es de test directement
    const testMarketSettings = {
      store_id: storeId,
      enabled_countries: ['BF', 'CI', 'SN'],
      default_currency: 'XOF',
      tax_settings: {
        includeTax: false,
        taxRate: 0,
        taxLabel: 'TVA'
      }
    };

    const testShippingMethods = [
      {
        store_id: storeId,
        name: 'Livraison standard',
        description: 'Livraison par transporteur local',
        price: 2500,
        estimated_days: '3-7 jours',
        icon: 'üì¶',
        is_active: true,
        available_countries: ['BF', 'CI', 'SN']
      },
      {
        store_id: storeId,
        name: 'Retrait en magasin',
        description: 'R√©cup√©ration directe en boutique',
        price: 0,
        estimated_days: 'Imm√©diat',
        icon: 'üè™',
        is_active: true,
        available_countries: ['BF', 'CI', 'SN']
      }
    ];

    // Ins√©rer les param√®tres de march√©
    const { error: marketError } = await supabase
      .from('market_settings')
      .upsert(testMarketSettings);

    if (marketError) {
      console.log('‚ùå Erreur insertion market_settings:', marketError);
    } else {
      console.log('‚úÖ Param√®tres de march√© cr√©√©s');
    }

    // Ins√©rer les m√©thodes de livraison
    const { error: shippingError } = await supabase
      .from('shipping_methods')
      .insert(testShippingMethods);

    if (shippingError) {
      console.log('‚ùå Erreur insertion shipping_methods:', shippingError);
    } else {
      console.log('‚úÖ M√©thodes de livraison cr√©√©es');
    }

    return true;
  } catch (error) {
    console.error('‚ùå Erreur cr√©ation donn√©es test:', error);
    return false;
  }
}

// Fonction pour v√©rifier l'√©tat des tables
export async function checkDatabaseStatus() {
  try {
    console.log('üîç V√©rification de l\'√©tat de la base de donn√©es...');

    // Test market_settings
    const { data: marketData, error: marketError } = await supabase
      .from('market_settings')
      .select('count')
      .limit(1);

    // Test shipping_methods
    const { data: shippingData, error: shippingError } = await supabase
      .from('shipping_methods')
      .select('count')
      .limit(1);

    const status = {
      marketSettings: !marketError,
      shippingMethods: !shippingError,
      marketError: marketError?.message,
      shippingError: shippingError?.message
    };

    console.log('üìä √âtat de la base de donn√©es:', status);
    return status;
  } catch (error) {
    console.error('‚ùå Erreur v√©rification:', error);
    return {
      marketSettings: false,
      shippingMethods: false,
      error: error
    };
  }
}

// Fonction pour cr√©er les politiques RLS
export async function createRLSPolicies() {
  try {
    console.log('üîê Cr√©ation des politiques RLS...');

    // D√©sactiver temporairement RLS pour permettre l'acc√®s
    const { error: disableRLSError } = await supabase.rpc('exec_sql', {
      sql: `
        ALTER TABLE public.market_settings DISABLE ROW LEVEL SECURITY;
        ALTER TABLE public.shipping_methods DISABLE ROW LEVEL SECURITY;
      `
    });

    if (disableRLSError) {
      console.log('‚ö†Ô∏è Impossible de d√©sactiver RLS:', disableRLSError);
    } else {
      console.log('‚úÖ RLS d√©sactiv√© temporairement');
    }

    return true;
  } catch (error) {
    console.error('‚ùå Erreur politiques RLS:', error);
    return false;
  }
}

// Exposer les fonctions globalement pour les tests
if (typeof window !== 'undefined') {
  (window as any).createTablesManually = createTablesManually;
  (window as any).createTestData = createTestData;
  (window as any).checkDatabaseStatus = checkDatabaseStatus;
  (window as any).createRLSPolicies = createRLSPolicies;
}
