import { useUser, useAuth as useClerkAuth, useSignUp, useSignIn, useClerk } from '@clerk/clerk-react';

export interface User {
  id: string;
  email: string;
  firstName?: string;
  lastName?: string;
  fullName?: string;
  imageUrl?: string;
  createdAt: Date;
}

export function useAuth() {
  const { isSignedIn, isLoaded, userId, signOut: clerkSignOut } = useClerkAuth();
  const { user: clerkUser } = useUser();
  const { signUp: clerkSignUp, isLoaded: signUpLoaded } = useSignUp();
  const { signIn: clerkSignIn, isLoaded: signInLoaded } = useSignIn();
  const clerk = useClerk();

  const user: User | null = clerkUser ? {
    id: clerkUser.id,
    email: clerkUser.emailAddresses[0]?.emailAddress || '',
    firstName: clerkUser.firstName || undefined,
    lastName: clerkUser.lastName || undefined,
    fullName: clerkUser.fullName || undefined,
    imageUrl: clerkUser.imageUrl || undefined,
    createdAt: clerkUser.createdAt || new Date(),
  } : null;

  // Fonction d'inscription avec gestion de la v√©rification email
  const signUp = async (email: string, password: string, firstName?: string, lastName?: string) => {
    try {
      console.log('üìù Inscription Clerk avec:', email, firstName, lastName);

      if (!clerkSignUp || !signUpLoaded) {
        return { error: { message: 'Service d\'inscription non disponible' } };
      }

      // Cr√©er le compte SANS firstName/lastName car ils ne sont pas support√©s
      const result = await clerkSignUp.create({
        emailAddress: email,
        password,
      });

      console.log('üìä Statut inscription:', result.status);
      console.log('üìã Champs requis:', result.requiredFields);
      console.log('üìã Champs manquants:', result.missingFields);
      console.log('üìã Champs non v√©rifi√©s:', result.unverifiedFields);

      // TOUJOURS pr√©parer la v√©rification email car Clerk l'exige
      if (result.status === 'missing_requirements') {
        console.log('üìß Pr√©paration v√©rification email...');

        try {
          // Pr√©parer la v√©rification email dans tous les cas
          await result.prepareEmailAddressVerification({ strategy: 'email_code' });
          console.log('üìß Code de v√©rification envoy√© !');

          return {
            error: null,
            needsVerification: true,
            signUpId: result.id
          };
        } catch (emailError) {
          console.error('‚ùå Erreur envoi email:', emailError);

          // Si l'email est d√©j√† v√©rifi√©, continuer
          if (emailError.message?.includes('already verified') ||
              emailError.message?.includes('d√©j√† v√©rifi√©')) {
            console.log('‚úÖ Email d√©j√† v√©rifi√© !');
            return { error: null };
          }

          return { error: { message: 'Impossible d\'envoyer le code de v√©rification' } };
        }
      }

      // Si inscription compl√®te directement (rare avec v√©rification email)
      if (result.status === 'complete') {
        await clerk.setActive({ session: result.createdSessionId });
        console.log('‚úÖ Inscription r√©ussie !');
        return { error: null };
      }

      return { error: { message: 'Statut d\'inscription inattendu: ' + result.status } };
    } catch (error: any) {
      console.error('‚ùå Erreur inscription:', error);

      // Gestion des erreurs sp√©cifiques
      if (error.errors?.[0]?.code === 'form_identifier_exists') {
        return { error: { message: 'Un compte existe d√©j√† avec cette adresse email' } };
      }

      const errorMessage = error.errors?.[0]?.message || error.message || 'Erreur d\'inscription';
      return { error: { message: errorMessage } };
    }
  };

  // Fonction de v√©rification du code email
  const verifyEmailCode = async (code: string) => {
    try {
      console.log('üìß V√©rification du code:', code);

      if (!clerkSignUp) {
        return { error: { message: 'Service de v√©rification non disponible' } };
      }

      const result = await clerkSignUp.attemptEmailAddressVerification({ code });

      console.log('üìä Statut v√©rification:', result.status);

      if (result.status === 'complete') {
        await clerk.setActive({ session: result.createdSessionId });
        console.log('‚úÖ V√©rification r√©ussie !');
        return { error: null };
      }

      return { error: { message: 'V√©rification incompl√®te' } };
    } catch (error: any) {
      console.error('‚ùå Erreur v√©rification:', error);
      const errorMessage = error.errors?.[0]?.message || error.message || 'Code de v√©rification invalide';
      return { error: { message: errorMessage } };
    }
  };

  // Fonction de connexion
  const signIn = async (email: string, password: string) => {
    try {
      console.log('üîê Connexion avec:', email);

      // V√©rifier si d√©j√† connect√©
      if (isSignedIn) {
        console.log('‚úÖ Utilisateur d√©j√† connect√© !');
        return { error: null };
      }

      if (!clerkSignIn || !signInLoaded) {
        return { error: { message: 'Service de connexion non disponible' } };
      }

      const result = await clerkSignIn.create({
        identifier: email,
        password,
      });

      console.log('üìä Statut connexion:', result.status);

      if (result.status === 'complete') {
        await clerk.setActive({ session: result.createdSessionId });
        console.log('‚úÖ Connexion r√©ussie !');
        return { error: null };
      }

      return { error: { message: 'Connexion incompl√®te' } };
    } catch (error: any) {
      console.error('‚ùå Erreur connexion:', error);

      // Gestion sp√©ciale pour "d√©j√† connect√©"
      if (error.message?.includes('already signed in') ||
          error.message?.includes('Session already exists')) {
        console.log('‚úÖ Utilisateur d√©j√† connect√© (via erreur) !');
        return { error: null };
      }

      const errorMessage = error.errors?.[0]?.message || error.message || 'Erreur de connexion';
      return { error: { message: errorMessage } };
    }
  };

  // Fonction de d√©connexion
  const signOut = async () => {
    try {
      await clerkSignOut();
      console.log('‚úÖ D√©connexion r√©ussie !');
      return { error: null };
    } catch (error: any) {
      console.error('‚ùå Erreur d√©connexion:', error);
      return { error: { message: 'Erreur de d√©connexion' } };
    }
  };

  return {
    user,
    isAuthenticated: isSignedIn,
    isLoading: !isLoaded,
    userId,
    signUp,
    signIn,
    signOut,
    verifyEmailCode,
  };
}
